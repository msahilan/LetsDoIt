AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:

  ApplicationName:
    Description: Name of the Application
    Type: String
    Default: hello-world

  Stage:
    Type: String
    Default: dev

  GithubUserName:
    Type: String
    Default: msahilan

  GithubRepo:
    Type: String
    Default: LetsDoIt

  GithubBranch:
    Type: String
    Default: master

  GithubOAuthToken:
    "Type": 'AWS::SSM::Parameter::Value<String>'
    Default: github-token

  ContainerPort:
    Type: Number
    Default: 8080

  ECRRepositoryName:
    Type: String
    Description: The ARN of the ECR repository
    Default: Development-Registry


Resources:

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "dev-repository"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          -
            Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "arn:aws:iam::968383140941:group/ahilan-cli2"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: cloudformation-aksv

  # Create Access Role for CodePipeLine
#  CodePipeLineExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: codepipeline.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/AdministratorAccess'
#
#  # Create Access Role for CodeBuild
#  CodeBuildExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          Effect: Allow
#          Principal:
#            Service: codebuild.amazonaws.com
#          Action: sts:AssumeRole
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AdministratorAccess
#
#  # Create Access Role for Cloudformation
#  CloudformationExecutionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: cloudformation.amazonaws.com
#            Action: 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', [!Ref ApplicationName, "-appbuild"]]
      Description: !Join [ '', [ 'Project to build the hello-world application ', !Ref ApplicationName ] ]
      ServiceRole: !Sub arn:aws:iam::968383140941:role/cloud_formation
      Artifacts:
        Location: cloudformation-aksv
        Type: "S3"
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}"
          - Name: ARTIFACT_BUCKET
            Value: cloudformation-aksv
          - Name: APPLICATION_NAME
            Value: !Ref ApplicationName
      TimeoutInMinutes: 15

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/CodePipelineServiceRole
      Stages:
        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref GithubRepo
                Branch: !Ref GithubBranch
                Owner: !Ref GithubUserName
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
              OutputArtifacts:
                - Name: App

        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

#        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to Fargate-Cluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${ContainerPort}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'FargateECSCluster']]
#                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster.yml
#              RunOrder: 1