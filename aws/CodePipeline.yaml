AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:

  ApplicationName:
    Description: Name of the Application
    Type: String
    Default: hello-world

  Stage:
    Type: String
    Default: dev

  GithubUserName:
    Type: String
    Default: msahilan

  GithubRepo:
    Type: String
    Default: LetsDoIt

  GithubBranch:
    Type: String
    Default: master

  GithubOAuthToken:
    Type: String
    Default: " "

  ContainerPort:
    Type: Number
    Default: 8080

  ECRRepositoryName:
    Type: String
    Description: The ARN of the ECR repository
    Default: dev-registry

  DevAccount:
    Description: AWS AccountNumber for dev
    Type: Number
    Default: 968383140941

Resources:

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName

  # Create the BuildProject with required Build information
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', [!Ref ApplicationName, "appbuild"]]
      Description: !Join [ '', [ 'Project to build the hello-world application ', !Ref ApplicationName ] ]
      ServiceRole: !Sub arn:aws:iam::${DevAccount}:role/CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${DevAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}"
          - Name: ARTIFACT_BUCKET
            Value: cloudformation-aksv
          - Name: APPLICATION_NAME
            Value: !Ref ApplicationName
      TimeoutInMinutes: 15

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !Sub arn:aws:iam::${DevAccount}:role/CodePipelineServiceRole
      Stages:
        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref GithubRepo
                Branch: !Ref GithubBranch
                Owner: !Ref GithubUserName
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
              OutputArtifacts:
                - Name: App

        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: DeployToDev
          Actions:
            - Name: DeployApplication
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: !Sub ${ApplicationName}-dev
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${ApplicationName}-dev
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: source-output-artifacts::aws/Fargate-Cluster.yml
                ParameterOverrides: !Sub |
                  {
                    "DockerImageTag" : { "Fn::GetParam" : ["BuildOutput",  "build_tag.json", "tag"] },
                    pAppName: "${ApplicationName}",
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: !Sub arn:aws:iam::${DevAccount}:role/CodePipelineCloudFormationRole
                OutputFileName: development-stackoutput.json
              InputArtifacts:
                - Name: BuildOutput
              OutputArtifacts:
                - Name: DevelopmentStackOutput
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: cloudformation-aksv
